generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Users {
  id          String         @id @default(uuid())
  firstName   String
  lastName    String
  email       String         @unique
  phoneNumber String
  role        String
  userName    String         @unique
  createdAt   DateTime       @default(now())
  fleetId     String?
  shipmentId  String?
  fleet       fleet_profile? @relation(fields: [fleetId], references: [id])
  shipment    Shipment?      @relation(fields: [shipmentId], references: [id])
}

model Shipment {
  id                   String            @id @default(uuid())
  shipmentName         String
  createdAt            DateTime          @default(now())
  shipmentBaseLocation String
  operationalStatus    OperationalStatus @default(FULLY_OPERATIONAL)
  users                Users[]
}

model Truck {
  id                 String        @id @default(uuid())
  truckModel         String
  registrationNumber String        @unique
  manufacturer       String
  yearOfManufacture  String
  capacity           String
  dimensions         String?
  fuelType           String
  mileage            String?
  status             TruckStatus   @default(AVAILABLE)
  fleetId            String
  driverId           String?
  driver             Driver?       @relation("DriverToTruck", fields: [driverId], references: [id])
  fleet              fleet_profile @relation(fields: [fleetId], references: [id])
}

model Driver {
  id         String         @id @default(uuid())
  name       String
  email      String         @unique
  registerId String         @unique
  phone      String
  license    String         @unique
  experience String
  status     DriverStatus   @default(AVAILABLE)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  fleetId    String?
  fleet      fleet_profile? @relation(fields: [fleetId], references: [id])
  trucks     Truck[]        @relation("DriverToTruck")
}

model fleet_profile {
  id                String            @id @default(uuid())
  fleetName         String
  createdAt         DateTime          @default(now())
  fleetBaseLocation String
  operationalStatus OperationalStatus @default(FULLY_OPERATIONAL)
  drivers           Driver[]
  trucks            Truck[]
  users             Users[]
}

enum OperationalStatus {
  FULLY_OPERATIONAL
  PARTIALLY_OPERATIONAL
  UNDER_MAINTENANCE
}

enum DriverStatus {
  ASSIGNED
  AVAILABLE
  ON_LEAVE
}

enum TruckStatus {
  AVAILABLE
  UNDER_MAINTENANCE
  OUT_OF_SERVICE
  IN_TRANSIT
  LOADING
  UNLOADING
  WAITING_FOR_ASSIGNMENT
  IDLE
  ON_SALE
}
